#
# a Python script for ploting results generated by PIXON
# by Yan-Rong Li, liyanrong@mail.ihep.ac.cn
# Jul 16, 2021
#

import numpy as np 
import matplotlib.pyplot as plt 
from matplotlib.backends.backend_pdf import PdfPages
import configparser as cfgpars
from os.path import basename
import sys

#=============================================
# load params
# 
def _parse_param(fname):
  with open(fname) as f:
    file_content = '[dump]\n' + f.read()
    
  config = cfgpars.ConfigParser(delimiters='=', allow_no_value=True)
  config.read_string(file_content)
  
  for key in config["dump"].keys():
    print(key, config["dump"][key])
  
  return config['dump']

#=============================================
# plot results
# 
# results placed at subdirectory "./data/"
#
def plot_results(fname):
  
  param = _parse_param(fname)
  filedir = "./data/"

  pdf = PdfPages("results.pdf")

  plt.rc("text", usetex=True)
  plt.rc('font', family='serif', size=15)
  
  cont = np.loadtxt(param["fcont"])
  line = np.loadtxt(param["fline"])
  offset = np.mean(line[:, 1]) - np.std(line[:, 1]) - (np.mean(cont[:, 1]) - np.std(cont[:, 1]))
  tlim1 = np.min((cont[0, 0], line[0, 0]))
  tlim2 = np.max((cont[-1,0], line[-1, 0]))
  tspan= tlim2-tlim1
  
  flag_tf_input = True
  if flag_tf_input:
    resp_input = np.loadtxt(filedir+"resp_input.txt")
  
  # three types of runs
  fnames = ["_pixon", "_drw", "_contfix"]
  postfix = param["pixon_basis_type"]
  itype = int(param["drv_lc_model"])
  
  if itype == 3: # all types run
    itypes = [0, 1, 2]
  else:
    itypes = [itype]
  
  ntype = len(itypes)
  wd = 0.75/ntype
  
  fig = plt.figure(figsize=(15, 4*ntype))
  fig_map = plt.figure(figsize=(10, 4*ntype))
  for iw, i in enumerate(itypes):
    fn = fnames[i]
    #===========================================================
    # plot transfer function first
    #===========================================================
    ax1 = fig.add_axes((0.1, 0.95-(iw+1)*wd, 0.5, wd))
    ax1.errorbar(cont[:, 0], cont[:, 1], yerr = cont[:, 2], ls='none', marker='None', markersize=3, zorder=0)
    ax1.errorbar(line[:, 0], line[:, 1]-0.7*offset, yerr = line[:, 2], ls='none', marker='None', markersize=3, zorder=0)
    if i==0:
      if param["pixon_uniform"] == 'true':
        cont_rec_uniform = np.loadtxt(filedir+"cont_pixon_uniform.txt_"+postfix)
        line_rec_uniform = np.loadtxt(filedir+"line_pixon_uniform_full.txt_"+postfix)
        pixon_map_uniform = np.loadtxt(filedir+"pixon_map_pixon_uniform.txt_"+postfix)
      else:
        cont_rec = np.loadtxt(filedir+"cont_pixon.txt_"+postfix)
        line_rec = np.loadtxt(filedir+"line_pixon_full.txt_"+postfix)
        pixon_map = np.loadtxt(filedir+"pixon_map_pixon.txt_"+postfix)
     
    elif i==1:
      if param["pixon_uniform"] == 'true':
        cont_rec_uniform = np.loadtxt(filedir+"cont_drw_uniform.txt_"+postfix)
        line_rec_uniform = np.loadtxt(filedir+"line_drw_uniform_full.txt_"+postfix)
        pixon_map_uniform = np.loadtxt(filedir+"pixon_map_drw_uniform.txt_"+postfix)
      else:
        cont_rec = np.loadtxt(filedir+"cont_drw.txt_"+postfix)
        line_rec = np.loadtxt(filedir+"line_drw_full.txt_"+postfix)
        pixon_map = np.loadtxt(filedir+"pixon_map_drw.txt_"+postfix)
    
    else:
      if param["pixon_uniform"] == 'true':
        cont_rec_uniform = np.loadtxt(filedir+"cont_recon_drw.txt")
        line_rec_uniform = np.loadtxt(filedir+"line_contfix_uniform_full.txt_"+postfix)
        pixon_map_uniform = np.loadtxt(filedir+"pixon_map_contfix_uniform.txt_"+postfix)
      else:
        cont_rec = np.loadtxt(filedir+"cont_recon_drw.txt")
        line_rec = np.loadtxt(filedir+"line_contfix_full.txt_"+postfix)
        pixon_map = np.loadtxt(filedir+"pixon_map_contfix.txt_"+postfix)

    
    if param["pixon_uniform"] == 'true':
      ax1.plot(cont_rec_uniform[:, 0], cont_rec_uniform[:, 1],  lw=1, color='b')
    else:
      ax1.plot(cont_rec[:, 0], cont_rec[:, 1], lw=1, color='r',)
    
    
    if param["pixon_uniform"] == 'true':
      idx = np.where( (line_rec_uniform[:, 0] > line[0, 0] - 10) & (line_rec_uniform[:, 0] < line[-1, 0] + 10))
      ax1.plot(line_rec_uniform[idx[0], 0], line_rec_uniform[idx[0], 1]-0.7*offset,  lw=1, color='b')
    else:
      idx = np.where( (line_rec[:, 0] > line[0, 0] - 10) & (line_rec[:, 0] < line[-1, 0] + 10))
      ax1.plot(line_rec[idx[0], 0], line_rec[idx[0], 1]-0.7*offset, lw=1, color='r')
    
    ax1.set_ylabel("Flux")
    ax1.set_xlim(tlim1-0.01*tspan, tlim2+0.01*tspan)
    ax1.minorticks_on()
     
    ax2 = fig.add_axes((0.64, 0.95-(iw+1)*wd, 0.3, wd))

    if flag_tf_input:
      ax2.plot(resp_input[:, 0], resp_input[:, 1], lw=2, color='k', label='Truth')

    if param['pixon_uniform'] == 'true':
      resp_uniform = np.loadtxt(filedir+"resp"+fn+"_uniform.txt_"+postfix)
      ax2.plot(resp_uniform[:, 0], resp_uniform[:, 1], lw=1, label=fn[1:]+' uniform', color='b')
    else:
      resp = np.loadtxt(filedir+"resp"+fn+".txt_"+postfix)
      ax2.plot(resp[:, 0], resp[:, 1], lw=1, label=fn[1:]+' pixel', color='r')
  
    ax2.legend(frameon=False, ncol=1)
    ax2.minorticks_on()
  
    #===========================================================
    # plot pixon map then
    #===========================================================
    ax_map = fig_map.add_axes((0.1, 0.95-(iw+1)*wd, 0.8, wd))
    if param["pixon_uniform"] == "true":
      dsize = pixon_map_uniform[1, 0]-pixon_map_uniform[0, 0]
      ax_map.plot(pixon_map_uniform[:, 0], pixon_map_uniform[:, 1]*dsize, lw=1, label=fn[1:]+' uniform', color='b')
    else:
      dsize = pixon_map[1, 0]-pixon_map[0, 0]
      ax_map.plot(pixon_map[:, 0], pixon_map[:, 1]*dsize, lw=1, label=fn[1:]+' pixel', color='r')

    ax_map.set_ylabel("Pixon Size (day)")
    ax_map.legend(frameon=False, ncol=2)
    if iw < len(itypes) - 1:
      [xt.set_visible(False) for xt in ax1.get_xticklabels()]
      [xt.set_visible(False) for xt in ax2.get_xticklabels()]
      [xt.set_visible(False) for xt in ax_map.get_xticklabels()]
  
  ax1.set_xlabel("Time (day)")
  ax2.set_xlabel("Time Lag (day)")
  ax_map.set_xlabel("Time Lag (day)")
  
  fname = basename(param["fline"])
  fname = fname.replace(".txt", ".pdf")
  pdf.savefig(fig, bbox_inches='tight')
  pdf.savefig(fig_map, bbox_inches='tight')
  
  pdf.close()


if __name__ == "__main__":
  if len(sys.argv) < 2:
    print("Please specify parameter file!")
  else:
    plot_results(sys.argv[1])